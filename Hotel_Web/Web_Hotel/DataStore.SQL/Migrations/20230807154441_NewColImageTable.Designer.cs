// <auto-generated />
using System;
using DataStore.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStore.SQL.Migrations
{
    [DbContext(typeof(Travel))]
    [Migration("20230807154441_NewColImageTable")]
    partial class NewColImageTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("About.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryConnectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryConnectId");

                    b.ToTable("Citiy");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Toshkent",
                            CountryConnectId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Paris",
                            CountryConnectId = 2
                        });
                });

            modelBuilder.Entity("About.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "O'zbekiston"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Fransiya"
                        });
                });

            modelBuilder.Entity("About.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<int>("CityConnctId")
                        .HasColumnType("int");

                    b.Property<string>("HotelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelPrice")
                        .HasColumnType("int");

                    b.Property<int>("HotelStar")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("CityConnctId");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            CityConnctId = 1,
                            HotelDescription = "Located in Tashkent, Hilton Tashkent City has a bar and a terrace.",
                            HotelName = "Hilton",
                            HotelPrice = 400,
                            HotelStar = 3
                        },
                        new
                        {
                            HotelId = 2,
                            CityConnctId = 2,
                            HotelDescription = "Отель B&B HOTEL Paris 17 Batignolles расположен на северо-западе Парижа,",
                            HotelName = "B&B",
                            HotelPrice = 500,
                            HotelStar = 5
                        });
                });

            modelBuilder.Entity("About.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("HotelConnctId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("HotelConnctId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("About.City", b =>
                {
                    b.HasOne("About.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryConnectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("About.Hotel", b =>
                {
                    b.HasOne("About.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityConnctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("About.Image", b =>
                {
                    b.HasOne("About.Hotel", "Hotel")
                        .WithMany("Images")
                        .HasForeignKey("HotelConnctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("About.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("About.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("About.Hotel", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
