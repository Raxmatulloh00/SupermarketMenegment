@inject IGetProductsByIdUseCase GetProductsByIdUseCase
@inject ISellProductsUseCase SellProductsUseCase
@if (productToSell != null)
{
	@if (!string.IsNullOrWhiteSpace(errorMesseage))
	{
		<div class="alert alert-danger">@errorMesseage</div>
	}
	<EditForm Model="productToSell" OnValidSubmit="SellProduct">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<div class="form-group">
			<label for="name">Product Name</label>
			<input class="form-control" type="text" readonly value="@productToSell.Name" />
		</div>
		<div class="form-group">
			<label for="price">Price</label>
			<input class="form-control" type="price" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
		</div>
		<div class="form-group">
			<label for="qty">Quantity</label>
			<AntDesign.InputNumber type="qty" @bind-Value="@productToSell.Quantity" />
		</div>
		<button type="submit" class="btn btn-primary	">Sell</button>
	</EditForm>
}

@code {
	private Product productToSell;
	private string errorMesseage;

	[Parameter]
	public  string CaashierName { get; set; }
	[Parameter]
	public Product SelectedProduct { get; set; }

	[Parameter]
	public EventCallback<Product> OnProductSold{ get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if (SelectedProduct != null)
		{

			productToSell = new Product
			{
				ProductId = SelectedProduct.ProductId,
				Name = SelectedProduct.Name,
				CategoryId = SelectedProduct.CategoryId,
				Price = SelectedProduct.Price,
				Quantity = 0
			};
		}
		else
		{
			productToSell = null;
		}

	}

	private void SellProduct()
	{
		if (string.IsNullOrWhiteSpace(CaashierName))
		{
			errorMesseage = "The Cashier's name is missing.";
			return;
		}
		var product = GetProductsByIdUseCase.Execute(productToSell.ProductId);
		if (productToSell.Quantity<=0)
		{
			errorMesseage = "The quanity has to be greater than zero.";
		}
		else if(product.Quantity >= productToSell.Quantity)
		{
			
			OnProductSold.InvokeAsync(productToSell);
			errorMesseage = string.Empty;
			SellProductsUseCase.Execute(CaashierName,productToSell.ProductId, productToSell.Quantity.Value);
		}
		else
		{
			errorMesseage = $"{product.Name} only has {product.Quantity} left. It is not enough";
		}
	}

}
