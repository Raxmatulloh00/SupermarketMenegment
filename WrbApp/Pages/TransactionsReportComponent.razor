@page "/transaction"
@attribute [Authorize(Policy = "AdminOnly")]

@inject IViewProductsUseCase RecordTransactionUseCase
@using AntDesign.Charts
@using Title = AntDesign.Charts.Title
@inject IJSRuntime JSRuntime
@inject IGetTransactionsUseCase GetTransactionsUseCase
<div class="row">
	<div class="col-2">
		<label for="cashier">Cashier Name</label>
		<input type="text" id="cashier" class="form-control" @bind-value="cashierName" @onkeypress="((KeyboardEventArgs args) => StationSearchKeyPressHandler(args))" />
	</div>
	<div class="col-3">
		<label for="startdate">Start Date</label>
		<input type="date" id="startdate" class="form-control" @bind-value="startDate" />
	</div>
	<div class="col-3">
		<label for="enddate">End Date</label>
		<input type="date" id="enddate" class="form-control" @bind-value="endDate" />
	</div>
	<div class="col-2">
		<label>&nbsp;</label>
		<button type="button" class="btn btn-primary form-control" @onclick="Buttons">Search</button>
	</div>
	<div class="col-2">
		<label>&nbsp;</label>
		<button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Print</button>
	</div>
</div>

	@if(isTab)
{
	<Tabs DefaultActiveKey="1" OnChange="LoadTrans">
		<TabPane Tab="Table" Key="1">
			@if (transactions != null)
			{
				<div style="margin-top:20px;" id="printarea">
					<table class="table">
						<thead>
							<tr>
								<th>Data Time</th>
								<th>Cashier Name</th>
								<th>Product Name</th>
								<th>Qty Before</th>
								<th>Qty Sold</th>
								<th>Qty After</th>
								<th>Price</th>
								<th>Sold Amt</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var tran in transactions)
							{
								<tr>
									<td>@tran.TimeStamp.ToString("yyyy-MM-dd hh:mm")</td>
									<td>@tran.CashierName</td>
									<td>@tran.ProductName</td>
									<td>@tran.BeforeQty</td>
									<td>@tran.SoldQty</td>
									<td>@(tran.BeforeQty - tran.SoldQty)</td>
									<td style="text-align:right">@(string.Format("{0:c}", tran.Price))</td>
									<td style="text-align:right">@(string.Format("{0:c}", tran.SoldQty * tran.Price))</td>
								</tr>
							}
						</tbody>
						<tfoot>
							<tr>
								<td colspan="6">&nbsp;</td>
								<td style="text-align:right">
									<b>Grand Total:</b>
								</td>
								<td style="text-align:right">
									<b>
										@(string.Format("{0:c}", transactions.Sum(x => x.Price * x.SoldQty)))
									</b>
								</td>
							</tr>
						</tfoot>
					</table>
				</div>
			}
		</TabPane>
		<TabPane Tab="Dashboard" Key="2">
			<ChildContent>
				<Pie Data="data" Config="config1" />
			</ChildContent>
		</TabPane>
	</Tabs>
}




@code {

	bool isTab = false;
	private string cashierName;
	private DateTime startDate;
	private DateTime endDate;
	private IEnumerable<Transaction> transactions;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		startDate = DateTime.Today;
		endDate = DateTime.Today;
		products = RecordTransactionUseCase.Execute().ToList();

		foreach (var item in products)
		{
			names.Add(item.Name);
			soldqty.Add(item.Quantity);
			data.Add(new ObjPie
				{
					type = item.Name,
					value = item.Quantity
				});
		};
	}

	private void Buttons()
	{
		isTab = true;
		transactions = GetTransactionsUseCase.Execute(cashierName, startDate, endDate);
		StateHasChanged();
	}
	void LoadTrans()
	{
		transactions = GetTransactionsUseCase.Execute(cashierName, startDate, endDate);
		StateHasChanged();
	}
	private void PrintReport()
	{
		JSRuntime.InvokeVoidAsync("print");
	}
	void StationSearchKeyPressHandler(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			LoadTrans();
		}
	}

	string activeKey { get; set; } = "1";

	List<Product> products = new List<Product>();
	List<string> names = new List<string>();
	List<int?> soldqty = new List<int?>();
	List<object> data = new List<object>();

	public class ObjPie
	{
		public string type { get; set; }
		public int? value { get; set; }
	}

	readonly PieConfig config1 = new PieConfig
		{
			ForceFit = true,
			Title = new Title
			{
				Visible = true,
				Text = "Multicolor Pie Chart"
			},
			Description = new Description
			{
				Visible = true,
				Text = "Specify the color mapping field (colorField), and the pie slice will be displayed in different colors according to the field data. To specify the color, you need to configure the color as an array. \nWhen the pie chart label type is set to inner, the label will be displayed inside the slice. Set the offset value of the offset control label."
			},
			Radius = 0.9,
			AngleField = "value",
			ColorField = "type",
			Label = new PieLabelConfig
			{
				Visible = true,
				Type = "inner"
			}
		};
}